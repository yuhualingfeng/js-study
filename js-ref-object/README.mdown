#ECMAScript原生引用类型
对象是某个特定引用类型的实例。新对象是使用new 操作符后跟一个构造函数来创建的。构造函数本身就是一个函数，只不过该函数是出于创建新对象的目的而定义的。
```javascript
var object = new Object();
```
ECMAScript 提供了很多原生引用类型（例如Object），以便开发人员用以实现常见的计算任务。

##Object类型

到目前为止，我们看到的大多数引用类型值都是Object 类型的实例；而且，Object 也是ECMAScript 中使用最多的一个类型。虽然Object 的实例不具备多少功能，但对于在应用程序中存储和传输数据而言，它们确实是非常理想的选择

###创建方式
创建Object对象的方式有两种

1. 使用`new`操作符后跟`Object`构造函数,
2. 对象字面量
```javascript

//new操作符后跟Object构造函数
var obj = new Object();
obj.name = 'yuhualingfeng';
obj.age = '18';

//对象字面量
var object = {
	name:'jake',
	age:24
};
```
通过对象字面量创建时,最后一个属性后不能加`,` 否则IE7及更早版本会报错.

###访问方式
访问Object对象的属性也有两种方式,点方法或数组的访问形式.
```javascript
	var name = object.name; //点方法
	var age = object['age']; //数组访问形式
```
我们建议使用点方法,但当访问的属性为变量时我们就必须使用数组访问形式.

##Array类型
除Object类型外,Array是最常用的类型,Array对象与其他语言相比有着自己的不同之处,首先同一数组对象的不同项可以保存不同类型的数据,其次数组对象的长短可以动态改变.

###:santa:创建方式
创建Array对象的方式有两种

1. Array构造函数.
2. 数组对象字面量

```javascript

//Array构造函数
var colors = new Array();
var colors = new Array(20);
var colors = new Array('red','black','blue');

//数组对象字面量
var colors =['red','blue','black'];
var name =[];
var values = [1,2,];

```
由于IE8及之前版本中的ECMAScript实现在数组字面量方面存在bug,上述代码中values的长度为3,其他浏览器中value的长度为2.为了兼容，我们应避免在最数组的最后一下中添加`,`

###:grapes:读取方式

读取和设置数组的值时，使用方括号并提供相应值的基于0 的数字索引
```javascript

var colors = ["red", "blue", "green"]; // 定义一个字符串数组
alert(colors[0]); // 显示第一项
colors[2] = "black"; // 修改第三项
colors[3] = "brown"; // 新增第四项

```

数组对象有一个`length`属性表示数组对象的长度,通过修改这个属性的值可以改变数组的长度

```javascript

var colors = ["red", "blue", "green"]; // 创建一个包含3 个字符串的数组
var names = []; // 创建一个空数组
alert(colors.length); //3
alert(names.length); //0

colors.length = 2;
alert(colors[2]); //undefined

```

```javascript

var colors = ["red", "blue", "green"]; // 创建一个包含3 个字符串的数组
colors[colors.length] = "black"; //（在位置3）添加一种颜色
colors[colors.length] = "brown"; //（在位置4）再添加一种颜色

colors[99] = "black"; // （在位置 99）添加一种颜色
alert(colors.length); // 100

```
tip:数组最多可以包含4 294 967 295 个项.

###:gift_heart:数组操作

####数组检测
```javascript

function isArray(value){
	
	return Object.prototype.toString.call(value) == '[object Array]';

}

```
ECMAScript 5 新增了Array.isArray()方法,支持 Array.isArray()方法的浏览器有IE9+、Firefox 4+、Safari 5+、Opera 10.5+和Chrome。

####转换方法

数组的转换方法有：`toString()` `toLoacalString()` `valueOf()` `join()`
```javascript

var colors = ["red", "blue", "green"]; // 创建一个包含3 个字符串的数组
alert(colors.toString()); // red,blue,green
alert(colors.valueOf()); // red,blue,green
alert(colors); // red,blue,green

alert(colors.join(",")); //red,green,blue
alert(colors.join("||")); //red||green||blue

```
tip:如果不给join()方法传入任何值，或者给它传入undefined，则使用逗号作为分隔符。IE7 及更早版本会错误的使用字符串"undefined"作为分隔符

####栈方法
栈是一种LIFO(Last-In-First-Out,后进先出)的数据结构,也就是新添加的项最早被移除.

1. `push()`:向数组末尾添加项.
2. `pop()`:从数组末尾移除项.

```javascript

var colors = new Array();
var count = colors.push('red','green'); //推入两项
alert(count); //2

count = colors.push('black'); //推入一项
alert(count); //3

var item = colors.pop();  //移除一项
alert(item); //black
alert(colors.length); //2

```
####队列方法
队列是一种FIFO(First-In-First-Out,先进先出)的数据结构,也就是最先添加的项最早被移除

1. 'shift()':从数组头部移除项.
2. `unshift()`:向数组头部添加项.

```javascript

var colors = ['black','red','blue'];
var item = colors.shift(); //移除第一项并返回
var count = colors.unshift('pink'); //在头部添加一项并返回数组长度 

```
tip:IE7 及更早版本对JavaScript 的实现中存在一个偏差，其unshift()方法总是返 回undefined 而不是数组的新长度

####重排序方法

1. `sort()`: 在默认情况下，`sort()`方法按升序排列数组项——即最小的值位于最前面，最大的值排在最后面。为了实现排序，sort()方法会调用每个数组项的toString()转型方法，然后比较得到的字符串，以确定如何排序。即使数组中的每一项都是数值，sort()`方法比较的也是字符串
2. `reverse()`: 反转数组项的顺序.

```javascript

var arr = [1,48,230,12];
arr.sort(); // [1, 12, 230, 48]

```
`sort()`方法可以接收一个比较函数作为参数，以便我们指定哪个值位于哪个值的前面。比较函数接收两个参数，如果第一个参数应该位于第二个之前则返回一个负数，如果两个参数相等则返回0，如果第一个参数应该位于第二个之后则返回一个正数
```javascript

function compare(value1,value2){
	
	if(value1 > value2){
		return 1;
	}
	else if(value1 < value2)
	{
		return -1;
	}
	else {
		return 0;
	}

}

var arr = [1,48,230,12];
arr.sort(); // [1, 12, 48, 230]

```

对于数值类型或者其 valueOf()方法会返回数值类型的对象类型，可以使用一个更简单的比较函数。这个函数只要用第二个值减第一个值即可
```javascript

function compare(value1, value2){
	return value2 - value1;
}

```

####操作方法

1. `concat()`: 数组拼接,并返回拼接后的结果.
2. `slice()` : `slice()`方法可以接受一或两个参数，即要返回项的起始和结束位置。在只有一个参数的情况下，`slice()`
方法返回从该参数指定位置开始到当前数组末尾的所有项。如果有两个参数，该方法返回起始和结束位置之间的项——但不包括结束位置的项
3. `splice()`:此方法有三个用途.
  1. *删除*：可以删除任意数量的项，只需指定2 个参数：要删除的第一项的位置和要删除的项数。例如，splice(0,2)会删除数组中的前两项。
  2. *插入*：可以向指定位置插入任意数量的项，只需提供3 个参数：起始位置、0（要删除的项数）和要插入的项。如果要插入多个项，可以再传入第四、第五，以至任意多个项。例如，splice(2,0,"red","green")会从当前数组的位置2 开始插入字符串"red"和"green"。
  3. 替换：可以向指定位置插入任意数量的项，且同时删除任意数量的项，只需指定3 个参数：起始位置、要删除的项数和要插入的任意数量的项。插入的项数不必与删除的项数相等。例如，splice (2,1,"red","green")会删除当前数组位置2 的项，然后再从位置2 开始插入字符串"red"和"green"

tip:如果 slice()方法的参数中有一个负数，则用数组长度加上该数来确定相应的位置。

```javascript

//concat()
var arr = ['red','black','blue'];
var result =  arr.concat(); // ['red','black','blue']
var result1 = arr.concat(['yellow','pink']); // ['red','black','blue','yellow','pink']
var result2 - arr.concat('white',['yellow','pink']); // ['red','black','blue','white','yellow','pink']

```
```javascript

//slice()
var colors = ["red", "green", "blue", "yellow", "purple"];
var colors2 = colors.slice(1);
var colors3 = colors.slice(1,4);
alert(colors2); //green,blue,yellow,purple
alert(colors3); //green,blue,yellow

```
```javascript

//splice()
var colors = ["red", "green", "blue"];
var removed = colors.splice(0,1); // 删除第一项
console.log(colors); // ['green','blue']
console.log(removed); // ['red'] 返回的数组中只包含一项

removed = colors.splice(1, 0, "yellow", "orange"); // 从位置1 开始插入两项
console.log(colors); // [`green`,`yellow`,`orange`,`blue`]
console.log(removed); // 返回的是一个空数组

removed = colors.splice(1, 1, "red", "purple"); // 插入两项，删除一项
console.log(colors); // [`green`,`red`,`purple`,`orange`,`blue`]
console.log(removed); // ['yellow'] 返回的数组中只包含一项

```

####位置方法

ECMAScript 5 为数组实例添加了两个位置方法：`indexOf()`和`lastIndexOf()`。这两个方法都接收两个参数：要查找的项和（可选的）表示查找起点位置的索引。其中，indexOf()方法从数组的开头（位0）开始向后查找，lastIndexOf()方法则从数组的末尾开始向前查找.这两个方法都返回要查找的项在数组中的位置，或者在没找到的情况下返回-1.

```javascript

var numbers = [1,2,3,4,5,4,3,2,1];
alert(numbers.indexOf(4)); //3
alert(numbers.lastIndexOf(4)); //5

alert(numbers.indexOf(4, 4)); //5
alert(numbers.lastIndexOf(4, 4)); //3

var person = { name: "Nicholas" };
var people = [{ name: "Nicholas" }];
var morePeople = [person];
alert(people.indexOf(person)); //-1
alert(morePeople.indexOf(person)); //0

```
支持它们的浏览器包括IE9+、Firefox 2+、Safari 3+、Opera 9.5+和Chrome。

####迭代方法

ECMAScript 5 为数组定义了5 个迭代方法。每个方法都接收两个参数：要在每一项上运行的函数和（可选的）运行该函数的作用域对象——影响`this`的值。传入这些方法中的函数会接收三个参数：数组项的值、该项在数组中的位置和数组对象本身。根据使用的方法不同，这个函数执行后的返回值可能会也可能不会影响方法的返回值。以下是这5 个迭代方法的作用。

1. `every()`：对数组中的每一项运行给定函数，如果该函数对每一项都返回true，则返回true
2. `fiter()`: 对数组中的每一项运行给定函数，返回该函数会返回true 的项组成的数组。
3. `forEach()`：对数组中的每一项运行给定函数。这个方法没有返回值。
4. `map()`：对数组中的每一项运行给定函数，返回每次函数调用的结果组成的数组。
5. `some()`：对数组中的每一项运行给定函数，如果该函数对任一项返回true，则返回true。

```javascript

var numbers = [1,2,3,4,5,4,3,2,1];
var everyResult = numbers.every(function(item, index, array){
return (item > 2);
});
alert(everyResult); //false


var someResult = numbers.some(function(item, index, array){
return (item > 2);
});
alert(someResult); //true

```
这几个方法都类似,只是返回值不一样,支持这些迭代方法的浏览器有IE9+、Firefox 2+、Safari 3+、Opera 9.5+和Chrome。

####归并方法
ECMAScript 5 还新增了两个归并数组的方法：`reduce()`和`reduceRight()`。这两个方法都会迭代数组的所有项，然后构建一个最终返回的值。其中，reduce()方法从数组的第一项开始，逐个遍历到最后。而reduceRight()则从数组的最后一项开始，向前遍历到第一项.

这两个方法都接收两个参数：一个在每一项上调用的函数和（可选的）作为归并基础的初始值。传给 `reduce()`和`reduceRight()`的函数接收`4` 个参数：前一个值、当前值、项的索引和数组对象。这个函数返回的任何值都会作为第一个参数自动传给下一项。第一次迭代发生在数组的第二项上，因此第一个参数是数组的第一项，第二个参数就是数组的第二项。

```javascript

var values = [1,2,3,4,5];
var sum = values.reduce(function(prev, cur, index, array){
return prev + cur;
});
console.log(sum); //15

var values = [1,2,3,4,5];
var sum = values.reduceRight(function(prev, cur, index, array){
return prev + cur;
});
alert(sum); //15

```
支持这两个归并函数的浏览器有IE9+、Firefox 3+、Safari 4+、Opera 10.5 和Chrome。




